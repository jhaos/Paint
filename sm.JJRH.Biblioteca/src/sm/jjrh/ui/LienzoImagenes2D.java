/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.jjrh.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import sm.jjrh.graficos.FormasGraficos;

/**
 *
 * @author julius
 */
public class LienzoImagenes2D extends Lienzo {

    
    private BufferedImage im;
    private boolean cargada = false;
    /** 
     * Creates new form LienzoImagenes2D
     */
    public LienzoImagenes2D() {
        initComponents();
    }

    /**
     * Devuelve si una imagen esta cargada o no.
     * @return Devuelve objeto de la clase boolean.
     */
    public boolean isCargada() {
        return cargada;
    }

    /**
     * Guardamos el estado de si la imagen está cargada o no.
     * @param cargada Variable del tipo boolean.
     */
    public void setCargada(boolean cargada) {
        this.cargada = cargada;
    }

    /**
     *Devuelve la imagen que esta cargada en el lienzo
     * @return variable del tipo BufferedImage.
     */
    public BufferedImage getIm() {
        return im;
    }

    /**
     * Asignamos una imagen al lienzo.
     * @param im Variable del tipo BufferedImage. 
     */
    public void setIm(BufferedImage im) {
        this.im = im;
        if(im!=null) {
            setPreferredSize(new Dimension(im.getWidth(),im.getHeight()));
        }
    }

    /**
     *Método sobrecargado para que se visualice la imagen y el vector de formas.
     * @param g Variable del tipo Graphics.
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
       
        if(im!=null) {
            if(!cargada){
                im.getGraphics().setColor(Color.white);
                im.getGraphics().fillRect(0, 0, im.getWidth(), im.getHeight());
            }
            g.drawImage(im, 0, 0,this);//Podemos cambiar la posicion inicial
        }
        
    }
    
    /**
     *Método que utilizaremos para meter las formas geométricas dentro de la imagen del lienzo. Devuelve una imagen con las
     * figuras.
     * @param drawVector Variable del tipo boolean.
     * @return Varia
     */
    public BufferedImage getImage(boolean drawVector){
        if (drawVector) {
            Graphics2D g2d = im.createGraphics();
            
            
            for (FormasGraficos s : getvShape()){
                s.setAtributos(g2d);
                if (s.getRelleno() != null){
                    g2d.setColor(s.getRelleno());
                    g2d.fill(s);
                }
                g2d.setColor(s.getColor());
                g2d.draw(s);
            }
        }
        
        
        return im;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(204, 204, 204));
        setMaximumSize(new java.awt.Dimension(300, 300));
        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(300, 300));
        setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

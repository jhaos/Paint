/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.util.ArrayList;
import java.util.ListIterator;
import javax.swing.JDesktopPane;
/**
 *
 * @author julius
 */
public class Lienzo extends javax.swing.JPanel {
    
    protected Point2D p1 = new Point(-10,-10);
    protected Point2D p2 = new Point(-10,-10);
    private Color color = new Color(255,0,0);
    private boolean relleno = false, isRender = false,
            isCompose = false, editar = false;
    private int cambioStroke = 1;
    private Line2D linea;
    private Shape figura, movida;
    private ArrayList <Shape> vShape = new ArrayList();
    private Rectangle r = new Rectangle(-10, -10, -10, -10); 
    private Ellipse2D c = new Ellipse2D.Float(-10.0f,-10.0f,10.0f,-10.0f);
    private RenderingHints render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                                        RenderingHints.VALUE_ANTIALIAS_ON);
    private Composite comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
    private Stroke stroke = new BasicStroke(cambioStroke);

 
    
    
    
    protected boolean limpiar = false;
    public formas forma = formas.Puntos;
   
    public ArrayList<Shape> getvShape() {
        return vShape;
    }
        
    public int getStrokeValue(){
        return cambioStroke;
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public boolean isRelleno() {
        return relleno;
    }

    public boolean isEditar() {
        return editar;
    }
    
       public boolean isRender() {
        return isRender;
    }

    public boolean isCompose() {
        return isCompose;
    }
    
    public void setEditar(boolean edit){
        this.editar = edit;
    }
    
    public void setRender(boolean renderizado){
        this.isRender = renderizado;
    }
    
    public void setCompose(boolean compose){
        this.isCompose = compose;
    }
    
    public void setStroke(int stroke){
        if (stroke == 0){
            stroke = 1;
        }
        this.cambioStroke = stroke;
    }
    
    public void setAtributos(Graphics2D g2d){        
        if (isRender){
            g2d.setRenderingHints(render);
        }if (isCompose){
            g2d.setComposite(comp);
        }
        stroke = new BasicStroke(cambioStroke);
        g2d.setStroke(stroke);
    }
    
    


    public boolean estaCerca(Line2D linea, Point2D p){
        return linea.ptLineDist(p) <= 4.0f;
    }
    
    public boolean estaCercaPunto(Line2D linea, Point2D p){
        return linea.getP1().distance(p) <= 4.0f;
    }
    /**
     * Creates new form 
     */
    public void setColor(Color color) {
        this.color = color;
    }
    
    public void setFormaLienzo(formas forma){
        this.forma = forma;
    }
    
    public formas getForma(){
        return forma;
    }

    public Color getColor() {
        return color;
    }

    public Lienzo() {
        initComponents();
    }
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(color);
        Graphics2D g2d = (Graphics2D)g;
        setAtributos(g2d);
        
        for (Shape s: vShape){
            if(!relleno)
                g2d.draw(s);
            else{
                if(s instanceof Line2D)
                    g2d.draw(s);
                else
                    g2d.fill(s);
                
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(750, 750));
        setMinimumSize(new java.awt.Dimension(500, 500));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 779, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private Shape createShape(Point2D p1, Point2D p2){
        
        switch(forma){
            case Puntos:
                figura = new Line2D.Float(p1, p1);
            case Lineas:
                figura = new Line2D.Float(p1, p1);
                break;
            case Rectangulo:
                figura = new Rectangle();
                ((Rectangle)figura).setFrameFromDiagonal(p1, p2);
                break;
            case Circulo:
                figura = new Ellipse2D.Float();
                ((Ellipse2D)figura).setFrameFromDiagonal(p1, p2);
                break;
            default:
                System.out.println("forma no correcta");
                break;
        }
        
        return figura;
    }
    
    private void updateShape(Point2D p1, Point2D n_p2){
        if (forma != formas.Puntos)
            if(figura instanceof Line2D){
                ((Line2D)figura).setLine(p1, n_p2);
            }else if (figura instanceof Rectangle){
                ((Rectangle)figura).setFrameFromDiagonal(p1, n_p2);
            }else if (figura instanceof Ellipse2D){
                ((Ellipse2D)figura).setFrameFromDiagonal(p1, n_p2);
                
            }
    }
    
    private Shape getSelectedShape(Point2D p){
        
        for(Shape s:vShape){
            if (s instanceof Line2D){
                if (((Line2D.Float)s).getP1().equals(((Line2D.Float)s).getP2())){
                    if(estaCercaPunto((Line2D)s, p))
                        return s; 
                }
                if (estaCerca((Line2D)s, p)){
                    return s;
                }
            }else{
                if(s.contains(p)) 
                    return s;
            }
        }
        return null;
    }
    
    public void setLocation(Point2D pos, Line2D l){
        double dx=pos.getX()-l.getX1();
        double dy=pos.getY()-l.getY1();
        Point2D np2 = new Point2D.Double(l.getX2()+dx,l.getY2()+dy);
        l.setLine(pos,np2);
    }
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        
        if (!editar){
            p1 = evt.getPoint();
            this.vShape.add(createShape(p1,p1));
            this.repaint();
        }else{
            movida = getSelectedShape(evt.getPoint());
        }
        
    }//GEN-LAST:event_formMousePressed

    
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here: 
        if (!editar){
            p2 = evt.getPoint();
            updateShape(p1, p2);
            this.repaint();
        }else{
            if(movida instanceof Line2D){
                    if (((Line2D.Float)movida).getP1().equals(((Line2D.Float)movida).getP2())){
                        ((Line2D.Float)movida).setLine(evt.getPoint(), evt.getPoint());
                    }else{
                        if (this.estaCerca((Line2D)movida, evt.getPoint())){
                            this.setLocation(evt.getPoint(), (Line2D)movida);
                        } 
                    }
                }else if (movida instanceof Rectangle){
                    ((Rectangle)movida).setLocation(evt.getPoint());
                }else if (movida instanceof Ellipse2D){
                    ((Ellipse2D)movida).setFrame(evt.getPoint().getX(), evt.getPoint().getY(), 
                   ((Ellipse2D)movida).getWidth(), ((Ellipse2D)movida).getHeight());
                    
                }
            
            
            repaint();
        }
        
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        if(forma != formas.Puntos)
            this.formMouseDragged(evt);
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
